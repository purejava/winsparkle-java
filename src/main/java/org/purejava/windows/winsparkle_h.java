// Generated by jextract

package org.purejava.windows;

import java.lang.foreign.Addressable;
import java.lang.foreign.MemoryAddress;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.net.URL;

import static java.lang.foreign.ValueLayout.*;
public class winsparkle_h  {

    /* package-private */ winsparkle_h() {}
    public static OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    public static int _TIME_H() {
        return (int)1L;
    }
    public static int _FEATURES_H() {
        return (int)1L;
    }
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    public static int __USE_POSIX() {
        return (int)1L;
    }
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    public static int __WORDSIZE() {
        return (int)64L;
    }
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    public static int __USE_MISC() {
        return (int)1L;
    }
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    public static int __GLIBC__() {
        return (int)2L;
    }
    public static int __GLIBC_MINOR__() {
        return (int)36L;
    }
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    public static int __clock_t_defined() {
        return (int)1L;
    }
    public static int __time_t_defined() {
        return (int)1L;
    }
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    public static int __timer_t_defined() {
        return (int)1L;
    }
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    public static int TIME_UTC() {
        return (int)1L;
    }
    public static int WIN_SPARKLE_VERSION_MAJOR() {
        return (int)0L;
    }
    public static int WIN_SPARKLE_VERSION_MINOR() {
        return (int)7L;
    }
    public static int WIN_SPARKLE_VERSION_MICRO() {
        return (int)0L;
    }
    public static OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    public static OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    public static OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __key_t = Constants$root.C_INT$LAYOUT;
    public static OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    public static OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    public static OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    public static OfInt pid_t = Constants$root.C_INT$LAYOUT;
    public static OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$0.clock$MH,"clock");
    }
    public static long clock () {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$0.time$MH,"time");
    }
    public static long time ( Addressable __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.difftime$MH,"difftime");
    }
    public static double difftime ( long __time1,  long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.mktime$MH,"mktime");
    }
    public static long mktime ( Addressable __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strftime$MH,"strftime");
    }
    public static long strftime ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strftime_l$MH,"strftime_l");
    }
    public static long strftime_l ( Addressable __s,  long __maxsize,  Addressable __format,  Addressable __tp,  Addressable __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.gmtime$MH,"gmtime");
    }
    public static MemoryAddress gmtime ( Addressable __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.localtime$MH,"localtime");
    }
    public static MemoryAddress localtime ( Addressable __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.gmtime_r$MH,"gmtime_r");
    }
    public static MemoryAddress gmtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$1.localtime_r$MH,"localtime_r");
    }
    public static MemoryAddress localtime_r ( Addressable __timer,  Addressable __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.asctime$MH,"asctime");
    }
    public static MemoryAddress asctime ( Addressable __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$1.ctime$MH,"ctime");
    }
    public static MemoryAddress ctime ( Addressable __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.asctime_r$MH,"asctime_r");
    }
    public static MemoryAddress asctime_r ( Addressable __tp,  Addressable __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.ctime_r$MH,"ctime_r");
    }
    public static MemoryAddress ctime_r ( Addressable __timer,  Addressable __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$2.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$2.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT,"__daylight");
    }
    public static int __daylight$get() {
        return (int) constants$2.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT, "__daylight"));
    }
    public static void __daylight$set( int x) {
        constants$2.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$2.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$2.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$2.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT,"__timezone");
    }
    public static long __timezone$get() {
        return (long) constants$2.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT, "__timezone"));
    }
    public static void __timezone$set( long x) {
        constants$2.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$2.__timezone$SEGMENT, "__timezone"), x);
    }
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$2.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$3.tzset$MH,"tzset");
    }
    public static void tzset () {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$3.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$3.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT,"daylight");
    }
    public static int daylight$get() {
        return (int) constants$3.daylight$VH.get(RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT, "daylight"));
    }
    public static void daylight$set( int x) {
        constants$3.daylight$VH.set(RuntimeHelper.requireNonNull(constants$3.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$3.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$3.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT,"timezone");
    }
    public static long timezone$get() {
        return (long) constants$3.timezone$VH.get(RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT, "timezone"));
    }
    public static void timezone$set( long x) {
        constants$3.timezone$VH.set(RuntimeHelper.requireNonNull(constants$3.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$3.timegm$MH,"timegm");
    }
    public static long timegm ( Addressable __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$3.timelocal$MH,"timelocal");
    }
    public static long timelocal ( Addressable __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$3.dysize$MH,"dysize");
    }
    public static int dysize ( int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$4.nanosleep$MH,"nanosleep");
    }
    public static int nanosleep ( Addressable __requested_time,  Addressable __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_getres$MH,"clock_getres");
    }
    public static int clock_getres ( int __clock_id,  Addressable __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_gettime$MH,"clock_gettime");
    }
    public static int clock_gettime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_settime$MH,"clock_settime");
    }
    public static int clock_settime ( int __clock_id,  Addressable __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_nanosleep$MH,"clock_nanosleep");
    }
    public static int clock_nanosleep ( int __clock_id,  int __flags,  Addressable __req,  Addressable __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$4.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    public static int clock_getcpuclockid ( int __pid,  Addressable __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_create$MH,"timer_create");
    }
    public static int timer_create ( int __clock_id,  Addressable __evp,  Addressable __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_delete$MH,"timer_delete");
    }
    public static int timer_delete ( Addressable __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_settime$MH,"timer_settime");
    }
    public static int timer_settime ( Addressable __timerid,  int __flags,  Addressable __value,  Addressable __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_gettime$MH,"timer_gettime");
    }
    public static int timer_gettime ( Addressable __timerid,  Addressable __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timer_getoverrun$MH,"timer_getoverrun");
    }
    public static int timer_getoverrun ( Addressable __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$5.timespec_get$MH,"timespec_get");
    }
    public static int timespec_get ( Addressable __ts,  int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_init$MH() {
        return RuntimeHelper.requireNonNull(constants$6.win_sparkle_init$MH,"win_sparkle_init");
    }
    public static void win_sparkle_init (Object... x0) {
        var mh$ = win_sparkle_init$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_cleanup$MH() {
        return RuntimeHelper.requireNonNull(constants$6.win_sparkle_cleanup$MH,"win_sparkle_cleanup");
    }
    public static void win_sparkle_cleanup (Object... x0) {
        var mh$ = win_sparkle_cleanup$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_lang$MH() {
        return RuntimeHelper.requireNonNull(constants$6.win_sparkle_set_lang$MH,"win_sparkle_set_lang");
    }
    public static void win_sparkle_set_lang ( Addressable lang) {
        var mh$ = win_sparkle_set_lang$MH();
        try {
            mh$.invokeExact(lang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_langid$MH() {
        return RuntimeHelper.requireNonNull(constants$6.win_sparkle_set_langid$MH,"win_sparkle_set_langid");
    }
    public static void win_sparkle_set_langid ( short lang) {
        var mh$ = win_sparkle_set_langid$MH();
        try {
            mh$.invokeExact(lang);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_appcast_url$MH() {
        return RuntimeHelper.requireNonNull(constants$6.win_sparkle_set_appcast_url$MH,"win_sparkle_set_appcast_url");
    }
    public static void win_sparkle_set_appcast_url (URL url) {
        var mh$ = win_sparkle_set_appcast_url$MH();
        try {
            mh$.invokeExact(url.toString());
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_dsa_pub_pem$MH() {
        return RuntimeHelper.requireNonNull(constants$6.win_sparkle_set_dsa_pub_pem$MH,"win_sparkle_set_dsa_pub_pem");
    }
    public static int win_sparkle_set_dsa_pub_pem ( Addressable dsa_pub_pem) {
        var mh$ = win_sparkle_set_dsa_pub_pem$MH();
        try {
            return (int)mh$.invokeExact(dsa_pub_pem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_app_details$MH() {
        return RuntimeHelper.requireNonNull(constants$7.win_sparkle_set_app_details$MH,"win_sparkle_set_app_details");
    }
    public static void win_sparkle_set_app_details ( String company_name,  String app_name,  String app_version) {
        var mh$ = win_sparkle_set_app_details$MH();
        try {
            mh$.invokeExact(company_name, app_name, app_version);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_app_build_version$MH() {
        return RuntimeHelper.requireNonNull(constants$7.win_sparkle_set_app_build_version$MH,"win_sparkle_set_app_build_version");
    }
    public static void win_sparkle_set_app_build_version ( Addressable build) {
        var mh$ = win_sparkle_set_app_build_version$MH();
        try {
            mh$.invokeExact(build);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_http_header$MH() {
        return RuntimeHelper.requireNonNull(constants$7.win_sparkle_set_http_header$MH,"win_sparkle_set_http_header");
    }
    public static void win_sparkle_set_http_header ( Addressable name,  Addressable value) {
        var mh$ = win_sparkle_set_http_header$MH();
        try {
            mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_clear_http_headers$MH() {
        return RuntimeHelper.requireNonNull(constants$7.win_sparkle_clear_http_headers$MH,"win_sparkle_clear_http_headers");
    }
    public static void win_sparkle_clear_http_headers (Object... x0) {
        var mh$ = win_sparkle_clear_http_headers$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_registry_path$MH() {
        return RuntimeHelper.requireNonNull(constants$7.win_sparkle_set_registry_path$MH,"win_sparkle_set_registry_path");
    }
    public static void win_sparkle_set_registry_path ( Addressable path) {
        var mh$ = win_sparkle_set_registry_path$MH();
        try {
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_config_methods$MH() {
        return RuntimeHelper.requireNonNull(constants$7.win_sparkle_set_config_methods$MH,"win_sparkle_set_config_methods");
    }
    public static void win_sparkle_set_config_methods ( Addressable config_methods) {
        var mh$ = win_sparkle_set_config_methods$MH();
        try {
            mh$.invokeExact(config_methods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_automatic_check_for_updates$MH() {
        return RuntimeHelper.requireNonNull(constants$8.win_sparkle_set_automatic_check_for_updates$MH,"win_sparkle_set_automatic_check_for_updates");
    }
    public static void win_sparkle_set_automatic_check_for_updates ( int state) {
        var mh$ = win_sparkle_set_automatic_check_for_updates$MH();
        try {
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_get_automatic_check_for_updates$MH() {
        return RuntimeHelper.requireNonNull(constants$8.win_sparkle_get_automatic_check_for_updates$MH,"win_sparkle_get_automatic_check_for_updates");
    }
    public static int win_sparkle_get_automatic_check_for_updates (Object... x0) {
        var mh$ = win_sparkle_get_automatic_check_for_updates$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_update_check_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$8.win_sparkle_set_update_check_interval$MH,"win_sparkle_set_update_check_interval");
    }
    public static void win_sparkle_set_update_check_interval ( int interval) {
        var mh$ = win_sparkle_set_update_check_interval$MH();
        try {
            mh$.invokeExact(interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_get_update_check_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$8.win_sparkle_get_update_check_interval$MH,"win_sparkle_get_update_check_interval");
    }
    public static int win_sparkle_get_update_check_interval (Object... x0) {
        var mh$ = win_sparkle_get_update_check_interval$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_get_last_check_time$MH() {
        return RuntimeHelper.requireNonNull(constants$8.win_sparkle_get_last_check_time$MH,"win_sparkle_get_last_check_time");
    }
    public static long win_sparkle_get_last_check_time (Object... x0) {
        var mh$ = win_sparkle_get_last_check_time$MH();
        try {
            return (long)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_error_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$9.win_sparkle_set_error_callback$MH,"win_sparkle_set_error_callback");
    }
    public static void win_sparkle_set_error_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_error_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_can_shutdown_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$9.win_sparkle_set_can_shutdown_callback$MH,"win_sparkle_set_can_shutdown_callback");
    }
    public static void win_sparkle_set_can_shutdown_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_can_shutdown_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_shutdown_request_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$10.win_sparkle_set_shutdown_request_callback$MH,"win_sparkle_set_shutdown_request_callback");
    }
    public static void win_sparkle_set_shutdown_request_callback ( Addressable x0) {
        var mh$ = win_sparkle_set_shutdown_request_callback$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_did_find_update_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$10.win_sparkle_set_did_find_update_callback$MH,"win_sparkle_set_did_find_update_callback");
    }
    public static void win_sparkle_set_did_find_update_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_did_find_update_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_did_not_find_update_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$11.win_sparkle_set_did_not_find_update_callback$MH,"win_sparkle_set_did_not_find_update_callback");
    }
    public static void win_sparkle_set_did_not_find_update_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_did_not_find_update_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_update_cancelled_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$11.win_sparkle_set_update_cancelled_callback$MH,"win_sparkle_set_update_cancelled_callback");
    }
    public static void win_sparkle_set_update_cancelled_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_update_cancelled_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_update_skipped_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$12.win_sparkle_set_update_skipped_callback$MH,"win_sparkle_set_update_skipped_callback");
    }
    public static void win_sparkle_set_update_skipped_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_update_skipped_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_update_postponed_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$12.win_sparkle_set_update_postponed_callback$MH,"win_sparkle_set_update_postponed_callback");
    }
    public static void win_sparkle_set_update_postponed_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_update_postponed_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_update_dismissed_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$13.win_sparkle_set_update_dismissed_callback$MH,"win_sparkle_set_update_dismissed_callback");
    }
    public static void win_sparkle_set_update_dismissed_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_update_dismissed_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_set_user_run_installer_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$13.win_sparkle_set_user_run_installer_callback$MH,"win_sparkle_set_user_run_installer_callback");
    }
    public static void win_sparkle_set_user_run_installer_callback ( Addressable callback) {
        var mh$ = win_sparkle_set_user_run_installer_callback$MH();
        try {
            mh$.invokeExact(callback);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_check_update_with_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$13.win_sparkle_check_update_with_ui$MH,"win_sparkle_check_update_with_ui");
    }
    public static void win_sparkle_check_update_with_ui (Object... x0) {
        var mh$ = win_sparkle_check_update_with_ui$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_check_update_with_ui_and_install$MH() {
        return RuntimeHelper.requireNonNull(constants$14.win_sparkle_check_update_with_ui_and_install$MH,"win_sparkle_check_update_with_ui_and_install");
    }
    public static void win_sparkle_check_update_with_ui_and_install (Object... x0) {
        var mh$ = win_sparkle_check_update_with_ui_and_install$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle win_sparkle_check_update_without_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$14.win_sparkle_check_update_without_ui$MH,"win_sparkle_check_update_without_ui");
    }
    public static void win_sparkle_check_update_without_ui (Object... x0) {
        var mh$ = win_sparkle_check_update_without_ui$MH();
        try {
            mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryAddress NULL() {
        return constants$14.NULL$ADDR;
    }
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    public static int __TIMESIZE() {
        return (int)64L;
    }
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    public static MemorySegment WIN_SPARKLE_VERSION_STRING() {
        return constants$14.WIN_SPARKLE_VERSION_STRING$SEGMENT;
    }
    public static int WINSPARKLE_RETURN_ERROR() {
        return (int)-1L;
    }
}


