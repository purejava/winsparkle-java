// Generated by jextract

package org.purejava.winsparkle;

import java.lang.foreign.*;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
public class win_sparkle_config_methods_tag {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("config_read"),
        Constants$root.C_POINTER$LAYOUT.withName("config_write"),
        Constants$root.C_POINTER$LAYOUT.withName("config_delete"),
        Constants$root.C_POINTER$LAYOUT.withName("user_data")
    ).withName("win_sparkle_config_methods_tag");
    public static MemoryLayout $LAYOUT() {
        return win_sparkle_config_methods_tag.$struct$LAYOUT;
    }
    static final FunctionDescriptor config_read$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle config_read$MH = RuntimeHelper.downcallHandle(
        win_sparkle_config_methods_tag.config_read$FUNC
    );
    public interface config_read {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(config_read fi, MemorySession session) {
            return RuntimeHelper.upcallStub(config_read.class, fi, win_sparkle_config_methods_tag.config_read$FUNC, session);
        }
        static config_read ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)win_sparkle_config_methods_tag.config_read$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle config_read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("config_read"));
    public static VarHandle config_read$VH() {
        return win_sparkle_config_methods_tag.config_read$VH;
    }
    public static MemoryAddress config_read$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.config_read$VH.get(seg);
    }
    public static void config_read$set( MemorySegment seg, MemoryAddress x) {
        win_sparkle_config_methods_tag.config_read$VH.set(seg, x);
    }
    public static MemoryAddress config_read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.config_read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void config_read$set(MemorySegment seg, long index, MemoryAddress x) {
        win_sparkle_config_methods_tag.config_read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static config_read config_read (MemorySegment segment, MemorySession session) {
        return config_read.ofAddress(config_read$get(segment), session);
    }
    static final FunctionDescriptor config_write$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle config_write$MH = RuntimeHelper.downcallHandle(
        win_sparkle_config_methods_tag.config_write$FUNC
    );
    public interface config_write {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(config_write fi, MemorySession session) {
            return RuntimeHelper.upcallStub(config_write.class, fi, win_sparkle_config_methods_tag.config_write$FUNC, session);
        }
        static config_write ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    win_sparkle_config_methods_tag.config_write$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle config_write$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("config_write"));
    public static VarHandle config_write$VH() {
        return win_sparkle_config_methods_tag.config_write$VH;
    }
    public static MemoryAddress config_write$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.config_write$VH.get(seg);
    }
    public static void config_write$set( MemorySegment seg, MemoryAddress x) {
        win_sparkle_config_methods_tag.config_write$VH.set(seg, x);
    }
    public static MemoryAddress config_write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.config_write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void config_write$set(MemorySegment seg, long index, MemoryAddress x) {
        win_sparkle_config_methods_tag.config_write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static config_write config_write (MemorySegment segment, MemorySession session) {
        return config_write.ofAddress(config_write$get(segment), session);
    }
    static final FunctionDescriptor config_delete$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle config_delete$MH = RuntimeHelper.downcallHandle(
        win_sparkle_config_methods_tag.config_delete$FUNC
    );
    public interface config_delete {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(config_delete fi, MemorySession session) {
            return RuntimeHelper.upcallStub(config_delete.class, fi, win_sparkle_config_methods_tag.config_delete$FUNC, session);
        }
        static config_delete ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    win_sparkle_config_methods_tag.config_delete$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle config_delete$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("config_delete"));
    public static VarHandle config_delete$VH() {
        return win_sparkle_config_methods_tag.config_delete$VH;
    }
    public static MemoryAddress config_delete$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.config_delete$VH.get(seg);
    }
    public static void config_delete$set( MemorySegment seg, MemoryAddress x) {
        win_sparkle_config_methods_tag.config_delete$VH.set(seg, x);
    }
    public static MemoryAddress config_delete$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.config_delete$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void config_delete$set(MemorySegment seg, long index, MemoryAddress x) {
        win_sparkle_config_methods_tag.config_delete$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static config_delete config_delete (MemorySegment segment, MemorySession session) {
        return config_delete.ofAddress(config_delete$get(segment), session);
    }
    static final VarHandle user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_data"));
    public static VarHandle user_data$VH() {
        return win_sparkle_config_methods_tag.user_data$VH;
    }
    public static MemoryAddress user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.user_data$VH.get(seg);
    }
    public static void user_data$set( MemorySegment seg, MemoryAddress x) {
        win_sparkle_config_methods_tag.user_data$VH.set(seg, x);
    }
    public static MemoryAddress user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)win_sparkle_config_methods_tag.user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        win_sparkle_config_methods_tag.user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


